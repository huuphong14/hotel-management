// utils/hotelHelpers.js
const Hotel = require('../models/Hotel');
const Room = require('../models/Room');

exports.updateHotelLowestPrice = async (hotelId) => {
  try {
    const currentDate = new Date();
    console.log(`üëâ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t gi√° cho kh√°ch s·∫°n: ${hotelId} t·∫°i th·ªùi ƒëi·ªÉm ${currentDate.toISOString()}`);

    // L·∫•y t·∫•t c·∫£ ph√≤ng c·ªßa kh√°ch s·∫°n c√≥ status = available
    const rooms = await Room.find({ 
      hotelId, 
      status: 'available' 
    });

    console.log(`üîç S·ªë l∆∞·ª£ng ph√≤ng c√≥ s·∫µn: ${rooms.length}`);

    if (rooms.length === 0) {
      console.log('‚ö†Ô∏è Kh√¥ng c√≥ ph√≤ng kh·∫£ d·ª•ng, c·∫≠p nh·∫≠t gi√° v·ªÅ 0');
      await Hotel.findByIdAndUpdate(hotelId, { 
        lowestPrice: 0, 
        lowestDiscountedPrice: 0,
        highestDiscountPercent: 0
      });
      return;
    }

    // X√°c ƒë·ªãnh ph√≤ng c√≥ gi√° th·∫•p nh·∫•t (tr∆∞·ªõc khi gi·∫£m)
    let lowestPrice = Math.min(...rooms.map(room => room.price));
    console.log(`üí∞ Gi√° th·∫•p nh·∫•t tr∆∞·ªõc gi·∫£m: ${lowestPrice}`);

    // T√≠nh to√°n gi√° sau gi·∫£m gi√°
    const roomsWithDiscount = rooms.map(room => {
      let discountedPrice = room.price;
      let discountActive = false;
      let discountPercent = 0;

      if (
        room.discountPercent > 0 &&
        room.discountStartDate && room.discountEndDate &&
        currentDate >= room.discountStartDate &&
        currentDate <= room.discountEndDate
      ) {
        discountedPrice = room.price * (1 - room.discountPercent / 100);
        discountActive = true;
        discountPercent = room.discountPercent;
        console.log(`üéØ Ph√≤ng ${room._id} c√≥ gi·∫£m gi√° ${discountPercent}% -> ${discountedPrice}`);
      } else {
        console.log(`‚ÑπÔ∏è Ph√≤ng ${room._id} kh√¥ng c√≥ gi·∫£m gi√° ho·∫∑c kh√¥ng n·∫±m trong th·ªùi gian gi·∫£m.`);
      }

      return {
        price: room.price,
        discountedPrice,
        discountActive,
        discountPercent
      };
    });

    let lowestDiscountedPrice = Math.min(...roomsWithDiscount.map(room => room.discountedPrice));
    console.log(`üí∏ Gi√° th·∫•p nh·∫•t sau gi·∫£m: ${lowestDiscountedPrice}`);

    const activeDiscounts = roomsWithDiscount.filter(room => room.discountActive);
    let highestDiscountPercent = 0;
    if (activeDiscounts.length > 0) {
      highestDiscountPercent = Math.max(...activeDiscounts.map(room => room.discountPercent));
    }
    console.log(`üìâ Ph·∫ßn trƒÉm gi·∫£m gi√° cao nh·∫•t: ${highestDiscountPercent}%`);

    await Hotel.findByIdAndUpdate(hotelId, {
      lowestPrice,
      lowestDiscountedPrice,
      highestDiscountPercent
    });

    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t gi√° cho kh√°ch s·∫°n ${hotelId}`);

  } catch (error) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t gi√° th·∫•p nh·∫•t cho kh√°ch s·∫°n:', error);
    throw error;
  }
};
