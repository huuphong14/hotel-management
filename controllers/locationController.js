const Location = require("../models/Location");
const Hotel = require("../models/Hotel");
const cloudinaryService = require("../config/cloudinaryService");

/**
 * @swagger
 * /api/locations:
 *   post:
 *     summary: "T·∫°o ƒë·ªãa ƒëi·ªÉm m·ªõi"
 *     tags: [Location]
 *     security:
 *       - bearerAuth: []
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             required:
 *               - name
 *             properties:
 *               name:
 *                 type: string
 *               image:
 *                 type: string
 *                 format: binary
 *               description:
 *                 type: string
 *     responses:
 *       201:
 *         description: "T·∫°o ƒë·ªãa ƒëi·ªÉm th√†nh c√¥ng"
 *       500:
 *         description: "L·ªói server"
 */
exports.createLocation = async (req, res) => {
  console.log('üè¢ [CREATE LOCATION] Starting location creation process');
  console.log('üìù [CREATE LOCATION] Request body:', JSON.stringify(req.body, null, 2));
  console.log('üì∑ [CREATE LOCATION] File uploaded:', req.file ? 'Yes' : 'No');
  
  try {
    // Upload ·∫£nh ƒë·∫°i di·ªán l√™n cloud n·∫øu c√≥
    if (req.file) {
      console.log('‚òÅÔ∏è [CREATE LOCATION] Uploading image to cloudinary...');
      console.log('üìÅ [CREATE LOCATION] File details:', {
        originalname: req.file.originalname,
        mimetype: req.file.mimetype,
        size: req.file.size
      });
      
      req.body.image = await cloudinaryService.uploadFromBuffer(
        req.file,
        "locations"
      );
      
      console.log('‚úÖ [CREATE LOCATION] Image uploaded successfully:', {
        url: req.body.image?.url || 'N/A',
        publicId: req.body.image?.publicId || 'N/A'
      });
    }

    console.log('üíæ [CREATE LOCATION] Creating location in database...');
    const location = await Location.create(req.body);
    
    console.log('üéâ [CREATE LOCATION] Location created successfully:', {
      id: location._id,
      name: location.name,
      hasImage: !!location.image
    });

    res.status(201).json({
      success: true,
      data: location,
    });
  } catch (error) {
    console.error('‚ùå [CREATE LOCATION] Error occurred:', {
      message: error.message,
      stack: error.stack,
      name: error.name
    });
    
    res.status(500).json({
      success: false,
      message: "L·ªói server",
    });
  }
};

/**
 * @swagger
 * /api/locations:
 *   get:
 *     summary: "L·∫•y danh s√°ch ƒë·ªãa ƒëi·ªÉm"
 *     tags: [Location]
 *     responses:
 *       200:
 *         description: "L·∫•y danh s√°ch ƒë·ªãa ƒëi·ªÉm th√†nh c√¥ng"
 *       500:
 *         description: "L·ªói server"
 */
exports.getLocations = async (req, res) => {
  console.log('üìã [GET LOCATIONS] Starting to fetch locations list');
  
  try {
    console.log('üîç [GET LOCATIONS] Querying active locations from database...');
    const locations = await Location.find({ status: "active" });
    
    console.log('‚úÖ [GET LOCATIONS] Locations fetched successfully:', {
      count: locations.length,
      locationNames: locations.map(loc => loc.name)
    });

    res.status(200).json({
      success: true,
      count: locations.length,
      data: locations,
    });
  } catch (error) {
    console.error('‚ùå [GET LOCATIONS] Error occurred:', {
      message: error.message,
      stack: error.stack,
      name: error.name
    });
    
    res.status(500).json({
      success: false,
      message: "L·ªói server",
    });
  }
};

/**
 * @swagger
 * /api/locations/{id}:
 *   get:
 *     summary: "L·∫•y th√¥ng tin m·ªôt ƒë·ªãa ƒëi·ªÉm"
 *     tags: [Location]
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID ƒë·ªãa ƒëi·ªÉm
 *     responses:
 *       200:
 *         description: "L·∫•y th√¥ng tin ƒë·ªãa ƒëi·ªÉm th√†nh c√¥ng"
 *       404:
 *         description: "Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm"
 *       500:
 *         description: "L·ªói server"
 */
exports.getLocation = async (req, res) => {
  const locationId = req.params.id;
  console.log('üîç [GET LOCATION] Starting to fetch single location:', { locationId });
  
  try {
    console.log('üíæ [GET LOCATION] Querying location from database...');
    const location = await Location.findById(locationId);

    if (!location) {
      console.log('‚ö†Ô∏è [GET LOCATION] Location not found:', { locationId });
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm",
      });
    }

    console.log('‚úÖ [GET LOCATION] Location found successfully:', {
      id: location._id,
      name: location.name,
      status: location.status
    });

    res.status(200).json({
      success: true,
      data: location,
    });
  } catch (error) {
    console.error('‚ùå [GET LOCATION] Error occurred:', {
      message: error.message,
      stack: error.stack,
      name: error.name,
      locationId
    });
    
    res.status(500).json({
      success: false,
      message: "L·ªói server",
    });
  }
};

/**
 * @swagger
 * /api/locations/{id}:
 *   put:
 *     summary: "C·∫≠p nh·∫≠t th√¥ng tin ƒë·ªãa ƒëi·ªÉm"
 *     tags: [Location]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID ƒë·ªãa ƒëi·ªÉm
 *     requestBody:
 *       required: true
 *       content:
 *         multipart/form-data:
 *           schema:
 *             type: object
 *             properties:
 *               name:
 *                 type: string
 *               image:
 *                 type: string
 *                 format: binary
 *               description:
 *                 type: string
 *     responses:
 *       200:
 *         description: "C·∫≠p nh·∫≠t ƒë·ªãa ƒëi·ªÉm th√†nh c√¥ng"
 *       404:
 *         description: "Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm"
 *       500:
 *         description: "L·ªói server"
 */
exports.updateLocation = async (req, res) => {
  const locationId = req.params.id;
  console.log('‚úèÔ∏è [UPDATE LOCATION] Starting location update process:', { locationId });
  console.log('üìù [UPDATE LOCATION] Request body:', JSON.stringify(req.body, null, 2));
  console.log('üì∑ [UPDATE LOCATION] New file uploaded:', req.file ? 'Yes' : 'No');
  
  try {
    console.log('üîç [UPDATE LOCATION] Finding existing location...');
    let location = await Location.findById(locationId);

    if (!location) {
      console.log('‚ö†Ô∏è [UPDATE LOCATION] Location not found:', { locationId });
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm",
      });
    }

    console.log('‚úÖ [UPDATE LOCATION] Location found:', {
      id: location._id,
      name: location.name,
      hasExistingImage: !!location.image
    });

    // Upload ·∫£nh ƒë·∫°i di·ªán l√™n cloud n·∫øu c√≥
    if (req.file) {
      console.log('üóëÔ∏è [UPDATE LOCATION] Processing image update...');
      
      // X√≥a ·∫£nh c≈© n·∫øu c√≥
      if (location.image && location.image.publicId) {
        console.log('üóëÔ∏è [UPDATE LOCATION] Deleting old image:', {
          publicId: location.image.publicId
        });
        
        await cloudinaryService.deleteFile(location.image.publicId);
        console.log('‚úÖ [UPDATE LOCATION] Old image deleted successfully');
      }

      console.log('‚òÅÔ∏è [UPDATE LOCATION] Uploading new image...');
      console.log('üìÅ [UPDATE LOCATION] New file details:', {
        originalname: req.file.originalname,
        mimetype: req.file.mimetype,
        size: req.file.size
      });

      req.body.image = await cloudinaryService.uploadFromBuffer(
        req.file,
        "locations"
      );
      
      console.log('‚úÖ [UPDATE LOCATION] New image uploaded successfully:', {
        url: req.body.image?.url || 'N/A',
        publicId: req.body.image?.publicId || 'N/A'
      });
    }

    console.log('üíæ [UPDATE LOCATION] Updating location in database...');
    location = await Location.findByIdAndUpdate(locationId, req.body, {
      new: true,
      runValidators: true,
    });

    console.log('üéâ [UPDATE LOCATION] Location updated successfully:', {
      id: location._id,
      name: location.name,
      hasImage: !!location.image
    });

    res.status(200).json({
      success: true,
      data: location,
    });
  } catch (error) {
    console.error('‚ùå [UPDATE LOCATION] Error occurred:', {
      message: error.message,
      stack: error.stack,
      name: error.name,
      locationId
    });
    
    res.status(500).json({
      success: false,
      message: "L·ªói server",
    });
  }
};

/**
 * @swagger
 * /api/locations/{id}:
 *   delete:
 *     summary: "X√≥a ƒë·ªãa ƒëi·ªÉm"
 *     tags: [Location]
 *     security:
 *       - bearerAuth: []
 *     parameters:
 *       - in: path
 *         name: id
 *         required: true
 *         schema:
 *           type: string
 *         description: ID ƒë·ªãa ƒëi·ªÉm
 *     responses:
 *       200:
 *         description: "X√≥a ƒë·ªãa ƒëi·ªÉm th√†nh c√¥ng"
 *       400:
 *         description: "Kh√¥ng th·ªÉ x√≥a ƒë·ªãa ƒëi·ªÉm v√¨ c√≥ kh√°ch s·∫°n ƒëang s·ª≠ d·ª•ng"
 *       404:
 *         description: "Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm"
 *       500:
 *         description: "L·ªói server"
 */
exports.deleteLocation = async (req, res) => {
  const locationId = req.params.id;
  console.log('üóëÔ∏è [DELETE LOCATION] Starting location deletion process:', { locationId });
  
  try {
    console.log('üîç [DELETE LOCATION] Finding location to delete...');
    const location = await Location.findById(locationId);

    if (!location) {
      console.log('‚ö†Ô∏è [DELETE LOCATION] Location not found:', { locationId });
      return res.status(404).json({
        success: false,
        message: "Kh√¥ng t√¨m th·∫•y ƒë·ªãa ƒëi·ªÉm",
      });
    }

    console.log('‚úÖ [DELETE LOCATION] Location found:', {
      id: location._id,
      name: location.name
    });

    // Ki·ªÉm tra xem c√≥ kh√°ch s·∫°n n√†o ƒëang s·ª≠ d·ª•ng ƒë·ªãa ƒëi·ªÉm n√†y kh√¥ng
    console.log('üè® [DELETE LOCATION] Checking for hotels using this location...');
    const hotelsUsingLocation = await Hotel.countDocuments({
      locationId: location._id,
    });

    console.log('üìä [DELETE LOCATION] Hotels count check result:', {
      hotelsCount: hotelsUsingLocation
    });

    if (hotelsUsingLocation > 0) {
      console.log('‚ö†Ô∏è [DELETE LOCATION] Cannot delete - hotels are using this location:', {
        locationId,
        hotelsCount: hotelsUsingLocation
      });
      
      return res.status(400).json({
        success: false,
        message: `Kh√¥ng th·ªÉ x√≥a ƒë·ªãa ƒëi·ªÉm n√†y v√¨ c√≥ ${hotelsUsingLocation} kh√°ch s·∫°n ƒëang s·ª≠ d·ª•ng`,
      });
    }

    // X√≥a ·∫£nh ƒë·ªãa ƒëi·ªÉm tr√™n cloud n·∫øu c√≥
    if (location.image && location.image.publicId) {
      console.log('‚òÅÔ∏è [DELETE LOCATION] Deleting location image from cloudinary:', {
        publicId: location.image.publicId
      });
      
      await cloudinaryService.deleteFile(location.image.publicId);
      console.log('‚úÖ [DELETE LOCATION] Image deleted from cloudinary successfully');
    }

    console.log('üíæ [DELETE LOCATION] Deleting location from database...');
    await location.deleteOne();
    
    console.log('üéâ [DELETE LOCATION] Location deleted successfully:', {
      id: location._id,
      name: location.name
    });

    res.status(200).json({
      success: true,
      message: "ƒê·ªãa ƒëi·ªÉm ƒë√£ ƒë∆∞·ª£c x√≥a",
    });
  } catch (error) {
    console.error('‚ùå [DELETE LOCATION] Error occurred:', {
      message: error.message,
      stack: error.stack,
      name: error.name,
      locationId
    });
    
    res.status(500).json({
      success: false,
      message: "L·ªói server",
    });
  }
};

/**
 * @swagger
 * /api/locations/search:
 *   get:
 *     summary: "T√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm theo t√™n"
 *     tags: [Location]
 *     parameters:
 *       - in: query
 *         name: q
 *         required: true
 *         schema:
 *           type: string
 *         description: "T·ª´ kh√≥a t√¨m ki·∫øm"
 *       - in: query
 *         name: limit
 *         required: false
 *         schema:
 *           type: integer
 *           default: 10
 *         description: "S·ªë l∆∞·ª£ng k·∫øt qu·∫£ t·ªëi ƒëa"
 *     responses:
 *       200:
 *         description: "T√¨m ki·∫øm ƒë·ªãa ƒëi·ªÉm th√†nh c√¥ng"
 *       400:
 *         description: "Thi·∫øu t·ª´ kh√≥a t√¨m ki·∫øm"
 *       500:
 *         description: "L·ªói server"
 */
exports.searchLocations = async (req, res) => {
  const { q, limit = 10 } = req.query;
  
  console.log('üîç [SEARCH LOCATIONS] Starting location search:', { 
    query: q, 
    limit: parseInt(limit) 
  });
  
  try {
    if (!q || q.trim() === '') {
      console.log('‚ö†Ô∏è [SEARCH LOCATIONS] Empty search query provided');
      return res.status(400).json({
        success: false,
        message: "Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm",
      });
    }

    const searchQuery = q.trim();
    console.log('üîç [SEARCH LOCATIONS] Searching locations with regex...');
    
    // T√¨m ki·∫øm kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng v√† ch·ª©a t·ª´ kh√≥a
    const locations = await Location.find({
      name: { $regex: searchQuery, $options: 'i' },
      status: "active"
    })
    .select('_id name image') // Ch·ªâ l·∫•y c√°c field c·∫ßn thi·∫øt
    .limit(parseInt(limit))
    .sort({ name: 1 }); // S·∫Øp x·∫øp theo t√™n A-Z

    console.log('‚úÖ [SEARCH LOCATIONS] Search completed:', {
      searchQuery,
      foundLocations: locations.length,
      locationNames: locations.map(loc => loc.name)
    });

    res.status(200).json({
      success: true,
      count: locations.length,
      data: locations,
    });
  } catch (error) {
    console.error('‚ùå [SEARCH LOCATIONS] Error occurred:', {
      message: error.message,
      stack: error.stack,
      name: error.name,
      searchQuery: q
    });
    
    res.status(500).json({
      success: false,
      message: "L·ªói server",
    });
  }
};

/**
 * @swagger
 * /api/locations/popular:
 *   get:
 *     summary: "L·∫•y top 10 ƒë·ªãa ƒëi·ªÉm ph·ªï bi·∫øn nh·∫•t"   
 *     tags: [Location]
 *     responses:
 *       200:
 *         description: "L·∫•y danh s√°ch ƒë·ªãa ƒëi·ªÉm ph·ªï bi·∫øn th√†nh c√¥ng"
 *       500:
 *         description: "L·ªói server"
 */
exports.getPopularLocations = async (req, res) => {
  console.log('üî• [GET POPULAR LOCATIONS] Starting to fetch popular locations');
  
  try {
    // T√¨m c√°c kh√°ch s·∫°n c√≥ tr·∫°ng th√°i active
    console.log('üè® [GET POPULAR LOCATIONS] Fetching active hotels...');
    const hotels = await Hotel.find({ status: "active" });
    
    console.log('üìä [GET POPULAR LOCATIONS] Hotels fetched:', {
      totalHotels: hotels.length
    });

    // ƒê·∫øm s·ªë l∆∞·ª£ng kh√°ch s·∫°n theo t·ª´ng ƒë·ªãa ƒëi·ªÉm
    console.log('üßÆ [GET POPULAR LOCATIONS] Counting hotels by location...');
    const locationCounts = {};
    let hotelsWithLocation = 0;
    let hotelsWithoutLocation = 0;
    
    hotels.forEach((hotel) => {
      if (hotel.locationId) {
        const locationId = hotel.locationId.toString();
        locationCounts[locationId] = (locationCounts[locationId] || 0) + 1;
        hotelsWithLocation++;
      } else {
        hotelsWithoutLocation++;
      }
    });

    console.log('üìà [GET POPULAR LOCATIONS] Location counting results:', {
      uniqueLocations: Object.keys(locationCounts).length,
      hotelsWithLocation,
      hotelsWithoutLocation,
      locationCounts: Object.entries(locationCounts).map(([id, count]) => ({ locationId: id, hotelCount: count }))
    });

    // L·∫•y danh s√°ch c√°c locationId
    const locationIds = Object.keys(locationCounts);
    
    console.log('üîç [GET POPULAR LOCATIONS] Fetching location details...');
    // L·∫•y th√¥ng tin chi ti·∫øt v·ªÅ c√°c ƒë·ªãa ƒëi·ªÉm
    const locations = await Location.find({
      _id: { $in: locationIds },
      status: "active",
    });

    console.log('üìç [GET POPULAR LOCATIONS] Active locations found:', {
      foundLocations: locations.length,
      locationNames: locations.map(loc => ({ id: loc._id, name: loc.name }))
    });

    // K·∫øt h·ª£p th√¥ng tin v√† s·∫Øp x·∫øp theo s·ªë l∆∞·ª£ng kh√°ch s·∫°n (gi·∫£m d·∫ßn)
    console.log('üîÑ [GET POPULAR LOCATIONS] Processing and sorting locations...');
    const popularLocations = locations
      .map((location) => ({
        _id: location._id,
        name: location.name,
        image: location.image,
        hotelCount: locationCounts[location._id.toString()] || 0,
      }))
      .sort((a, b) => b.hotelCount - a.hotelCount)
      .slice(0, 10); // Gi·ªõi h·∫°n 10 ƒë·ªãa ƒëi·ªÉm ph·ªï bi·∫øn nh·∫•t

    console.log('‚úÖ [GET POPULAR LOCATIONS] Popular locations processed successfully:', {
      totalPopularLocations: popularLocations.length,
      topLocations: popularLocations.map(loc => ({ 
        name: loc.name, 
        hotelCount: loc.hotelCount 
      }))
    });

    res.status(200).json({
      success: true,
      count: popularLocations.length,
      data: popularLocations,
    });
  } catch (error) {
    console.error('‚ùå [GET POPULAR LOCATIONS] Error occurred:', {
      message: error.message,
      stack: error.stack,
      name: error.name
    });
    
    res.status(500).json({
      success: false,
      message: "L·ªói server",
    });
  }
};